package tgbot

import (
	"database/sql"
	"fmt"
	"log"
	"strings"
	"time"

	"tgbot/internal/entities"
	"tgbot/internal/storage"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type TestQuestion struct {
	Question string
	Options  []string
	Answer   int
}

func Run(bot *tgbotapi.BotAPI, db *sql.DB) error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		return fmt.Errorf("failed to get updates: %w", err)
	}

	courses, err := storage.GetCourses(db)
	if err != nil {
		return fmt.Errorf("failed to fetch courses: %w", err)
	}

	for update := range updates {
		if update.Message == nil {
			continue
		}

		HandleConversation(db, bot, courses, update)
	}

	return nil
}

var userStates = make(map[int64]*entities.UserState)

func HandleConversation(botDB *sql.DB, bot *tgbotapi.BotAPI, courses []entities.Course, update tgbotapi.Update) {
	text := update.Message.Text
	chatID := update.Message.Chat.ID
	userState := getUserState(chatID)

	if userState.Step == "" && userState.Name == "" {
		userState.Step = "waiting_for_name"
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: %v", err)
		}
		return
	}

	if userState.Step == "waiting_for_name" {
		userState.Name = strings.TrimSpace(text)
		userState.Step = "waiting_for_phone"
		msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %v", err)
		}
		return
	}

	if userState.Step == "waiting_for_phone" {
		userState.PhoneNumber = strings.TrimSpace(text)
		userState.Step = "taking_test"
		userState.IsTakingTest = true
		userState.TestIndex = 0
		userState.TestScore = 0

		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("–°–ø–∞—Å–∏–±–æ, %s! –°–µ–π—á–∞—Å –Ω–∞—á–Ω—ë—Ç—Å—è —Ç–µ—Å—Ç –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–≤–µ—á–∞–π, –≤—ã–±—Ä–∞–≤ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç 1 –¥–æ 4.", userState.Name)))
		sendTestQuestion(bot, chatID, 0)
		return
	}

	if userState.IsTakingTest {
		handleTestStep(bot, botDB, chatID, text, userState, courses)
		return
	}

	switch text {
	case "/history":
		sendHistory(botDB, bot, chatID)
		return
	case "/courses":
		sendCourses(bot, chatID, courses)
		return
	case "/teachers":
		sendTeachers(bot, chatID, courses)
		return
	case "/schedule":
		sendSchedules(bot, chatID, courses)
		return
	case "/enrollments":
		sendEnrollments(botDB, bot, chatID)
		return

	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := storage.SaveMessage(botDB, chatID, "user", text); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	var msg tgbotapi.MessageConfig

	switch userState.Step {
	case "":
		msg = handleInitialStep(chatID, text, userState, courses)

	case "waiting_for_course_selection":
		msg = handleCourseSelection(chatID, text, userState, courses)

	case "waiting_for_payment_confirmation":
		msg = handlePaymentConfirmation(chatID, text, userState, bot, botDB)

	case "payment_successful":
		msg = tgbotapi.NewMessage(chatID, "–ù–∞–ø–∏—à–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å' –¥–ª—è –Ω–∞—á–∞–ª–∞.")
		userState.Step = ""

	default:
		msg = tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥. –ù–∞–ø–∏—à–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å' –¥–ª—è –Ω–∞—á–∞–ª–∞.")
		userState.Step = ""
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := storage.SaveMessage(botDB, chatID, "bot", msg.Text); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func getUserState(chatID int64) *entities.UserState {
	if state, exists := userStates[chatID]; exists {
		return state
	}
	userStates[chatID] = &entities.UserState{}
	return userStates[chatID]
}

func sendEnrollments(db *sql.DB, bot *tgbotapi.BotAPI, chatID int64) {
	enrollments, err := storage.GetAllEnrollments(db)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: %v", err)
		bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π."))
		return
	}

	if len(enrollments) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."))
		return
	}

	var b strings.Builder
	b.WriteString("üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:\n\n")
	for i, e := range enrollments {
		status := "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
		if e.IsPaid {
			status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ"
		}
		b.WriteString(fmt.Sprintf("%d) %s (%s) ‚Äî %s ‚Äî %s ‚Äî %s\n", i+1, e.Name, e.PhoneNumber, e.CourseName, status, e.Timestamp))
	}

	// –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
	const chunkSize = 4000
	text := b.String()
	for len(text) > 0 {
		end := chunkSize
		if len(text) < chunkSize {
			end = len(text)
		}
		bot.Send(tgbotapi.NewMessage(chatID, text[:end]))
		text = text[end:]
	}
}

func handleInitialStep(chatID int64, text string, state *entities.UserState, courses []entities.Course) tgbotapi.MessageConfig {
	if state.Name == "" {
		state.Name = text
		state.Step = "name_entered"
		return tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å.")
	}
	if strings.EqualFold(text, "–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å") {
		var b strings.Builder
		b.WriteString("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:\n\n")
		for i, course := range courses {
			b.WriteString(fmt.Sprintf(
				"%d) %s\n–£—Ä–æ–≤–µ–Ω—å: %s\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n–í—Ä–µ–º—è: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–¶–µ–Ω–∞: %.2f‚ÇΩ\n\n",
				i+1, course.Name, course.Level, course.Teacher, course.Schedule, course.Description, course.Price,
			))
		}
		b.WriteString("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
		state.Step = "waiting_for_course_selection"
		return tgbotapi.NewMessage(chatID, b.String())
	}

	return tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å' —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å.")
}

func handleCourseSelection(chatID int64, text string, state *entities.UserState, courses []entities.Course) tgbotapi.MessageConfig {
	courseNumber, err := parseCourseSelection(text)
	if err == nil && courseNumber >= 1 && courseNumber <= len(courses) {
		selectedCourse := &courses[courseNumber-1]
		state.Selected = selectedCourse
		state.Step = "waiting_for_payment_confirmation"
		return tgbotapi.NewMessage(chatID, fmt.Sprintf(
			"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: %s.\n–¶–µ–Ω–∞: %.2f‚ÇΩ\n–•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.",
			selectedCourse.Name, selectedCourse.Price,
		))
	}

	return tgbotapi.NewMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –ø–æ –Ω–æ–º–µ—Ä—É.")
}

func handlePaymentConfirmation(chatID int64, text string, state *entities.UserState, bot *tgbotapi.BotAPI, botDB *sql.DB) tgbotapi.MessageConfig {
	if strings.EqualFold(text, "–î–∞") {
		state.Step = "payment_successful"
		storage.SaveEnrollment(botDB, chatID, state.Name, state.Selected.Name, true, state.PhoneNumber)
		return tgbotapi.NewMessage(chatID, "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")
	} else if strings.EqualFold(text, "–ù–µ—Ç") {
		state.Step = ""
		storage.SaveEnrollment(botDB, chatID, state.Name, state.Selected.Name, false, state.PhoneNumber)
		go remindUserLater(bot, botDB, chatID, state.Selected.Name, 7*24*time.Hour) // Pass botDB and courseName
		return tgbotapi.NewMessage(chatID, "–•–æ—Ä–æ—à–æ, –ø–æ–¥—É–º–∞–π—Ç–µ –µ—â–µ. –ù–∞–ø–∏—à–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å', —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä.")
	}

	return tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞' –µ—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –∏–ª–∏ '–ù–µ—Ç' –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏.")
}

func parseCourseSelection(input string) (int, error) {
	var number int
	_, err := fmt.Sscanf(input, "%d", &number)
	return number, err
}

func remindUserLater(bot *tgbotapi.BotAPI, db *sql.DB, chatID int64, courseName string, duration time.Duration) { // Added db and courseName parameters
	time.Sleep(duration)

	userState := getUserState(chatID)
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä—Å –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
	enrollments, err := storage.GetEnrollmentsByUserIDAndCourse(db, chatID, courseName) // Use passed db and courseName
	if err == nil && len(enrollments) > 0 && enrollments[0].IsPaid {
		return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª
	}

	// –ï—Å–ª–∏ –∫—É—Ä—Å –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–æ–≤—ã–π
	if userState.Selected != nil && userState.Selected.Name == courseName { // Check if the reminder is still for the same course
		msgText := fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å '%s', –Ω–æ –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –µ–≥–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫—É—Ä—Å, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", courseName)
		msg := tgbotapi.NewMessage(chatID, msgText)
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Error sending reminder: %v", err)
		}
	} else if userState.Step == "" || userState.Step == "waiting_for_course_selection" { // Generic reminder if no specific course context or user moved on
		msg := tgbotapi.NewMessage(chatID, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ '–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Error sending reminder: %v", err)
		}
	}
}

func sendHistory(db *sql.DB, bot *tgbotapi.BotAPI, chatID int64) {
	history, err := storage.GetConversationHistory(db, chatID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
		bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏."))
		return
	}

	if len(history) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–î–∏–∞–ª–æ–≥ –ø—É—Å—Ç."))
		return
	}

	var builder strings.Builder
	for _, msg := range history {
		builder.WriteString(fmt.Sprintf("[%s] %s: %s\n", msg.Timestamp, msg.Role, msg.Text))
	}

	const chunkSize = 4000
	text := builder.String()
	for len(text) > 0 {
		end := chunkSize
		if len(text) < chunkSize {
			end = len(text)
		}
		bot.Send(tgbotapi.NewMessage(chatID, text[:end]))
		text = text[end:]
	}
}

func sendCourses(bot *tgbotapi.BotAPI, chatID int64, courses []entities.Course) {
	if len(courses) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–ö—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."))
		return
	}

	var b strings.Builder
	b.WriteString("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n")
	for i, course := range courses {
		b.WriteString(fmt.Sprintf("%d) %s ‚Äî %.2f‚ÇΩ\n", i+1, course.Name, course.Price))
	}
	bot.Send(tgbotapi.NewMessage(chatID, b.String()))
}

func sendTeachers(bot *tgbotapi.BotAPI, chatID int64, courses []entities.Course) {
	teachersMap := make(map[string]bool)
	var b strings.Builder
	b.WriteString("üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n\n")
	for _, course := range courses {
		if !teachersMap[course.Teacher] {
			b.WriteString(fmt.Sprintf("- %s\n", course.Teacher))
			teachersMap[course.Teacher] = true
		}
	}
	bot.Send(tgbotapi.NewMessage(chatID, b.String()))
}

func sendSchedules(bot *tgbotapi.BotAPI, chatID int64, courses []entities.Course) {
	if len(courses) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."))
		return
	}

	var b strings.Builder
	b.WriteString("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤:\n\n")
	for _, course := range courses {
		b.WriteString(fmt.Sprintf("- %s: %s\n", course.Name, course.Schedule))
	}
	bot.Send(tgbotapi.NewMessage(chatID, b.String()))
}

func sendTestQuestion(bot *tgbotapi.BotAPI, chatID int64, index int) {
	q := testQuestions[index]
	var b strings.Builder
	b.WriteString(fmt.Sprintf("‚ùì %s\n", q.Question))
	for i, option := range q.Options {
		b.WriteString(fmt.Sprintf("%d) %s\n", i+1, option))
	}
	bot.Send(tgbotapi.NewMessage(chatID, b.String()))
}

func handleTestStep(bot *tgbotapi.BotAPI, db *sql.DB, chatID int64, userAnswer string, state *entities.UserState, courses []entities.Course) {
	answerIndex := -1
	_, err := fmt.Sscanf(userAnswer, "%d", &answerIndex)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ –æ—Ç 1 –¥–æ 4
	if err != nil || answerIndex < 1 || answerIndex > 4 {
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
		bot.Send(msg)
		// –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
		sendTestQuestion(bot, chatID, state.TestIndex)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
	if answerIndex-1 == testQuestions[state.TestIndex].Answer {
		state.TestScore++
	}

	state.TestIndex++

	if state.TestIndex >= len(testQuestions) {
		state.IsTakingTest = false
		state.Step = ""
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
		if err := storage.SaveTestResult(db, chatID, state.Name, state.TestScore); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞: %v", err)
		}
		bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ %d –∏–∑ %d –±–∞–ª–ª–æ–≤.", state.TestScore, len(testQuestions))))
		sendRecommendedCourses(bot, db, chatID, state.TestScore)

		// –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º
		time.Sleep(2 * time.Second)

		// –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
		state.Step = "waiting_for_course_selection"
		msg := handleInitialStep(chatID, "–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å", state, courses)
		bot.Send(msg)
		return
	}

	// –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
	sendTestQuestion(bot, chatID, state.TestIndex)
}

func sendRecommendedCourses(bot *tgbotapi.BotAPI, db *sql.DB, chatID int64, score int) {
	var level string
	if score <= 3 {
		level = "–ù–∞—á–∞–ª—å–Ω—ã–π"
	} else if score <= 7 {
		level = "–°—Ä–µ–¥–Ω–∏–π"
	} else {
		level = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
	}

	courses, _ := storage.GetCourses(db) // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–µ—Ä–µ–¥–∞–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

	var b strings.Builder
	b.WriteString(fmt.Sprintf("üìö –ö—É—Ä—Å—ã —É—Ä–æ–≤–Ω—è \"%s\":\n\n", level))
	i := 1
	for _, course := range courses {
		if strings.EqualFold(course.Level, level) {
			b.WriteString(fmt.Sprintf("%d) %s ‚Äî %.2f‚ÇΩ\n", i, course.Name, course.Price))
			i++
		}
	}

	if i == 1 {
		b.WriteString("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
	}

	bot.Send(tgbotapi.NewMessage(chatID, b.String()))
}
